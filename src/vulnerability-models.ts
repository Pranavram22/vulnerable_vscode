// Define data models for the vulnerability scanner

export enum VulnerabilityCategory {
    INJECTION = "Injection",
    BROKEN_AUTH = "Broken Authentication",
    SENSITIVE_DATA = "Sensitive Data Exposure",
    XXE = "XML External Entities",
    BROKEN_ACCESS = "Broken Access Control",
    SECURITY_MISCONFIG = "Security Misconfiguration",
    XSS = "Cross-Site Scripting",
    INSECURE_DESERIALIZATION = "Insecure Deserialization",
    VULNERABLE_COMPONENTS = "Using Components with Known Vulnerabilities",
    INSUFFICIENT_LOGGING = "Insufficient Logging & Monitoring"
  }
  
  export enum VulnerabilitySeverity {
    LOW = "Low",
    MEDIUM = "Medium",
    HIGH = "High",
    CRITICAL = "Critical"
  }
  
  export interface Vulnerability {
    id: string;
    name: string;
    category: VulnerabilityCategory;
    description: string;
    severity: VulnerabilitySeverity;
    cwe?: string;
    remediation: string;
    examples: string[];
    patterns: RegExp[];
  }
  
  export interface VulnerabilityInstance {
    id: string;
    vulnerability: Vulnerability;
    filePath: string;
    lineNumber: number;
    columnNumber: number;
    lineContent: string;
    timestamp: Date;
    fixed: boolean;
  }
  
  // Define vulnerability definitions
  export const vulnerabilities: Vulnerability[] = [
    // Broken Access Control
    {
      id: "A01:2021",
      name: "Broken Access Control",
      category: VulnerabilityCategory.BROKEN_ACCESS,
      description: "Restrictions on authenticated users are not properly enforced, allowing attackers to access unauthorized functionality.",
      severity: VulnerabilitySeverity.HIGH,
      cwe: "CWE-284",
      remediation: "Implement proper access controls. Deny by default. Use role-based access control.",
      examples: [
        "Direct access to objects without access control checks",
        "Bypassing access control by modifying the URL or HTML page",
        "Missing JWT validation"
      ],
      patterns: [
        /\.\.\/\.\.\/\.\.\/\.\.\/\.\.\/\.\.\/etc\/passwd/i,
        /req\.session\.isAdmin\s*=\s*true/i,
        /role\s*=\s*('|")admin('|")/i
      ]
    },
    // Cryptographic Failures
    {
      id: "A02:2021",
      name: "Cryptographic Failures",
      category: VulnerabilityCategory.SENSITIVE_DATA,
      description: "Failures related to cryptography leading to sensitive data exposure.",
      severity: VulnerabilitySeverity.HIGH,
      cwe: "CWE-310",
      remediation: "Encrypt all sensitive data at rest. Use strong encryption algorithms. Don't store sensitive data unnecessarily.",
      examples: [
        "Weak encryption algorithms (MD5, SHA1)",
        "Hardcoded encryption keys",
        "Transmission of sensitive data in cleartext"
      ],
      patterns: [
        /MD5|SHA1/i,
        /const\s+key\s*=\s*['"`][a-zA-Z0-9]{1,32}['"`]/i,
        /http:\/\//i,
      ]
    },
    // Injection
    {
      id: "A03:2021",
      name: "Injection",
      category: VulnerabilityCategory.INJECTION,
      description: "SQL, NoSQL, OS, and LDAP injection flaws occur when untrusted data is sent to an interpreter.",
      severity: VulnerabilitySeverity.CRITICAL,
      cwe: "CWE-77",
      remediation: "Use parameterized queries. Validate and sanitize input. Use ORMs.",
      examples: [
        "SQL Injection: User input directly used in SQL queries",
        "NoSQL Injection: User input directly used in NoSQL queries",
        "OS Command Injection: User input sent to system commands"
      ],
      patterns: [
        /exec\(\s*['"`].*\$\{.*\}['"`]\s*\)/i,
        /db\.query\(\s*['"`].*\$\{.*\}['"`]\s*\)/i,
        /eval\(\s*.*\)/i,
        /SELECT.*FROM.*WHERE.*=.*\$\{.*\}/i,
      ]
    },
    // Add more vulnerabilities as needed...
  ];
  